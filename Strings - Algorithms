***Strings - Algorithms***

> EX 1: CamelCase
import math
import os
import random
import re
import sys
def camelcase(s):
    uppercase = list(filter(lambda k: k.upper()==k, s))
    return len(uppercase)+1

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = camelcase(s)

    fptr.write(str(result) + '\n')

    fptr.close()



EX 2: Mars Exploration    
import math
import os
import random
import re
import sys
def marsExploration(s):
    #s = 'SoSTOTSBS'
    changed = 0
    for i in range(int(len(s)/3)):
        substring = s[3*i:3*(i+1)]
        if substring[0]!='S':
            changed+=1
        if substring[1]!='O':
            changed+=1
        if substring[2] != 'S':
            changed += 1
    return changed

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = marsExploration(s)

    fptr.write(str(result) + '\n')

    fptr.close()
    
    
    

> EX 3: Hakerrank in a String!
import math
import os
import random
import re
import sys

def hackerrankInString(s):
    ideal = 'hackerrank'
    s = list(s)
    positions = []
    for char in ideal:
        try:
            if len(positions)>0:
                positions.append(s.index(char, positions[-1]+1))
            else:
                positions.append(s.index(char))
        except:
            return 'NO'
    if len(positions)!=len(ideal):
        return 'NO'
    else:
        if sorted(positions)==positions:
            return 'YES'
        else:
            return 'NO'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        s = input()

        result = hackerrankInString(s)

        fptr.write(result + '\n')

    fptr.close()




> EX 4: Pangrams
import math
import os
import random
import re
import sys

import string
def pangrams(arr):
    all_chars = set(string.ascii_lowercase)
    lower_chars_in_string = s.lower()
    all_chars_in_string = set(lower_chars_in_string)
    if all_chars_in_string.issuperset(all_chars):
        return 'pangram'
    else:
        return 'not pangram'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = pangrams(s)

    fptr.write(result + '\n')

    fptr.close()




EX 5: Alternating Characters
import math
import os
import random
import re
import sys

def alternatingCharacters(s):
    # Write your code here
    l = list(s)
    to_be_deleted = 0
    for i in range(len(l)):
        if i!= len(l)-1 and l[i]==l[i+1]:
            to_be_deleted += 1
    return to_be_deleted
